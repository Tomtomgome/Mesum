#include <Math.hpp>

namespace m::math
{
//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
mU64 splitmix64(mU64* a_state)
{
    mU64 result = *a_state;

    *a_state = result + 0x9E3779B97f4A7C15;
    result   = (result ^ (result >> 30)) * 0xBF58476D1CE4E5B9;
    result   = (result ^ (result >> 27)) * 0x94D049BB133111EB;
    return result ^ (result >> 31);
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
mU64 rol64(mU64 a_x, mInt a_k)
{
    return (a_x << a_k) | (a_x >> (64 - a_k));
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
mXoRandomNumberGenerator::mXoRandomNumberGenerator(mU64 a_seed)
{
    mU64 tmp     = splitmix64(&a_seed);
    m_state.s[0] = (mU32)tmp;
    m_state.s[1] = (mU32)(tmp >> 32);

    tmp          = splitmix64(&a_seed);
    m_state.s[2] = (mU32)tmp;
    m_state.s[3] = (mU32)(tmp >> 32);
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
mU64 mXoRandomNumberGenerator::get_nextU64()
{
    mU64*      s      = m_state.s;
    mU64 const result = rol64(s[1] * 5, 7) * 9;
    mU64 const t      = s[1] << 17;

    s[2] ^= s[0];
    s[3] ^= s[1];
    s[1] ^= s[2];
    s[0] ^= s[3];

    s[2] ^= t;
    s[3] = rol64(s[3], 45);

    return result;
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
mU32 mXoRandomNumberGenerator::get_nextU32()
{
    return mU32(get_nextU64());
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
mDouble mXoRandomNumberGenerator::get_nextDouble()
{
    return (get_nextU64() >> 11) * 0x1.0p-53;
}

//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------
mFloat mXoRandomNumberGenerator::get_nextFloat()
{
    return mFloat(get_nextDouble());
}

}  // namespace m::math