#pragma once

#include <Kernel/Types.hpp>
#include <Kernel/MathTypes.hpp>

#include "Renderer.hpp"

#include <string>


namespace m
{
namespace input
{
class mIInputManager;
}

///////////////////////////////////////////////////////////////////////////////
/// \addtogroup Graphics
/// \{
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/// \brief Namespace grouping window related utilities
///////////////////////////////////////////////////////////////////////////////
namespace windows
{
///////////////////////////////////////////////////////////////////////////////
/// \brief Interface defining a window
///////////////////////////////////////////////////////////////////////////////
class mIWindow
{
   public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Structure holding initialization data for windows
    ///////////////////////////////////////////////////////////////////////////
    struct mInitData
    {
        std::string   name;  //!< The name of the window
        math::mUIVec2 size;  //!< The initial size of the window
        mBool isTransparent; //!< HACK
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Alias the type of callback when resizing the window
    ///////////////////////////////////////////////////////////////////////////
    using mOnResizeCallback = mCallback<void, mU32, mU32>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Alias the type of callback when destroying the window
    ///////////////////////////////////////////////////////////////////////////
    using mOnDestroyCallback = mCallback<void>;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default destructor
    ///////////////////////////////////////////////////////////////////////////
    virtual ~mIWindow() = default;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Initialize the window
    ///
    /// \param a_initData The initialization data for the window
    ///////////////////////////////////////////////////////////////////////////
    virtual void init(mInitData const& a_initData) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Destroys a window
    ///////////////////////////////////////////////////////////////////////////
    virtual void destroy() = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Link an input manager to the window
    ///
    /// Only one input manager can be linked to a window
    ///
    /// \param a_inputManager The input manager to link, passing nullptr
    /// is valid and means the window doesn't notify anybody
    ///////////////////////////////////////////////////////////////////////////
    virtual void link_inputManager(input::mIInputManager* a_inputManager) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Link a renderer to the window
    ///
    /// \todo This logic need to be removed from the window
    ///
    /// \param a_renderer The renderer to link to the window
    ///////////////////////////////////////////////////////////////////////////
    virtual render::ISurface::HdlPtr link_renderer(
        render::IRenderer* a_renderer) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Tells the window that it will be holding the dearImGui context
    ///
    /// \todo This logic need to be removed from the window
    ///////////////////////////////////////////////////////////////////////////
    virtual void set_asImGuiWindow() = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Explicitly sets the fullscreeness of the window
    ///
    /// \param a_fullscreen Set true to set the window fullscreen, false
    /// otherwiser
    ///////////////////////////////////////////////////////////////////////////
    virtual void set_fullScreen(mBool a_fullscreen) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Toggle the fullscreen state of the window
    ///////////////////////////////////////////////////////////////////////////
    virtual void toggle_fullScreen() = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Attach a callback that will be called when the window is
    /// destroyed
    ///
    /// \param a_onDestroyCallback The callback to attach
    ///////////////////////////////////////////////////////////////////////////
    virtual void attach_toDestroy(
        mOnDestroyCallback const& a_onDestroyCallback) = 0;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Attach a callback that will be called when the window is resized
    ///
    /// \param a_onResizeCallback The callback to attach
    ///////////////////////////////////////////////////////////////////////////
    virtual void attach_toResize(
        mOnResizeCallback const& a_onResizeCallback) = 0;
};
}  // namespace windows
///////////////////////////////////////////////////////////////////////////////
/// \}
///////////////////////////////////////////////////////////////////////////////
}  // namespace m